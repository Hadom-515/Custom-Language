Terminals unused in grammar

    RRETURN
    UNKNOWN_TOKEN


Grammar

    0 $accept: program $end

    1 program: function_declerations

    2 function_declerations: function_declerations function_decleration
    3                      | ε

    4 statements: statements statement
    5           | ε

    6 statement: var_decleration SEMICOLON
    7          | var_assigment SEMICOLON
    8          | print_statement SEMICOLON
    9          | if_statement
   10          | return_statement SEMICOLON
   11          | read_statement SEMICOLON
   12          | while_statement
   13          | BREAK SEMICOLON
   14          | CONTINUE SEMICOLON

   15 if_statement: IF L_PAR bool_expression R_PAR L_CURLY statements R_CURLY else_statement

   16 else_statement: ELSE L_CURLY statements R_CURLY
   17               | ε

   18 comparitors: LESS
   19            | LESS_EQ
   20            | GREATER
   21            | GREATER_EQ
   22            | EQUALITY
   23            | NOT_EQ

   24 return_statement: RETURN expression

   25 var_decleration: INT IDENTIFIER
   26                | INT L_BRAKET NUMBER R_BRAKET IDENTIFIER
   27                | INT IDENTIFIER ASSIGNMENT expression

   28 paramerter_decleration: INT IDENTIFIER
   29                       | INT IDENTIFIER COMMA paramerter_decleration
   30                       | INT L_BRAKET R_BRAKET IDENTIFIER
   31                       | INT L_BRAKET R_BRAKET IDENTIFIER COMMA paramerter_decleration
   32                       | ε

   33 function_decleration: FUNC IDENTIFIER L_PAR paramerter_decleration R_PAR L_CURLY statements R_CURLY

   34 var_assigment: IDENTIFIER ASSIGNMENT expression
   35              | IDENTIFIER L_BRAKET NUMBER R_BRAKET ASSIGNMENT expression

   36 expression: multiplicative_expr
   37           | multiplicative_expr ADD expression
   38           | multiplicative_expr SUBTRACTION expression

   39 bool_expression: expression comparitors expression

   40 multiplicative_expr: term
   41                    | term MOD multiplicative_expr
   42                    | term MULTIPLY multiplicative_expr
   43                    | term DIVIDE multiplicative_expr

   44 term: L_PAR expression R_PAR
   45     | NUMBER
   46     | IDENTIFIER L_PAR pars R_PAR
   47     | varibles

   48 pars: pars COMMA expression
   49     | expression
   50     | ε

   51 varibles: IDENTIFIER
   52         | IDENTIFIER L_BRAKET NUMBER R_BRAKET

   53 print_statement: PRT L_PAR expression R_PAR

   54 read_statement: READ L_PAR expression R_PAR

   55 while_statement: WHILE L_PAR bool_expression R_PAR L_CURLY statements R_CURLY


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    SUBTRACTION (258) 38
    ADD (259) 37
    MULTIPLY (260) 42
    DIVIDE (261) 43
    MOD (262) 41
    L_PAR (263) 15 33 44 46 53 54 55
    R_PAR (264) 15 33 44 46 53 54 55
    NUMBER <op_value> (265) 26 35 45 52
    IDENTIFIER <op_value> (266) 25 26 27 28 29 30 31 33 34 35 46 51 52
    RETURN (267) 24
    RRETURN (268)
    INT (269) 25 26 27 28 29 30 31
    PRT (270) 53
    FUNC (271) 33
    WHILE (272) 55
    IF (273) 15
    ELSE (274) 16
    BREAK (275) 13
    CONTINUE (276) 14
    READ (277) 54
    SEMICOLON (278) 6 7 8 10 11 13 14
    COMMA (279) 29 31 48
    L_CURLY (280) 15 16 33 55
    R_CURLY (281) 15 16 33 55
    L_BRAKET (282) 26 30 31 35 52
    R_BRAKET (283) 26 30 31 35 52
    ASSIGNMENT (284) 27 34 35
    LESS (285) 18
    LESS_EQ (286) 19
    GREATER (287) 20
    GREATER_EQ (288) 21
    EQUALITY (289) 22
    NOT_EQ (290) 23
    UNKNOWN_TOKEN (291)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    program (38)
        on left: 1
        on right: 0
    function_declerations <codenode> (39)
        on left: 2 3
        on right: 1 2
    statements <codenode> (40)
        on left: 4 5
        on right: 4 15 16 33 55
    statement <codenode> (41)
        on left: 6 7 8 9 10 11 12 13 14
        on right: 4
    if_statement <double> (42)
        on left: 15
        on right: 9
    else_statement <double> (43)
        on left: 16 17
        on right: 15
    comparitors <double> (44)
        on left: 18 19 20 21 22 23
        on right: 39
    return_statement <codenode> (45)
        on left: 24
        on right: 10
    var_decleration <codenode> (46)
        on left: 25 26 27
        on right: 6
    paramerter_decleration <codenode> (47)
        on left: 28 29 30 31 32
        on right: 29 31 33
    function_decleration <codenode> (48)
        on left: 33
        on right: 2
    var_assigment <codenode> (49)
        on left: 34 35
        on right: 7
    expression <codenode> (50)
        on left: 36 37 38
        on right: 24 27 34 35 37 38 39 44 48 49 53 54
    bool_expression <double> (51)
        on left: 39
        on right: 15 55
    multiplicative_expr <codenode> (52)
        on left: 40 41 42 43
        on right: 36 37 38 41 42 43
    term <codenode> (53)
        on left: 44 45 46 47
        on right: 40 41 42 43
    pars <codenode> (54)
        on left: 48 49 50
        on right: 46 48
    varibles <codenode> (55)
        on left: 51 52
        on right: 47
    print_statement <codenode> (56)
        on left: 53
        on right: 8
    read_statement <double> (57)
        on left: 54
        on right: 11
    while_statement <double> (58)
        on left: 55
        on right: 12


State 0

    0 $accept: • program $end

    $default  reduce using rule 3 (function_declerations)

    program                go to state 1
    function_declerations  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: function_declerations •
    2 function_declerations: function_declerations • function_decleration

    FUNC  shift, and go to state 4

    $default  reduce using rule 1 (program)

    function_decleration  go to state 5


State 3

    0 $accept: program $end •

    $default  accept


State 4

   33 function_decleration: FUNC • IDENTIFIER L_PAR paramerter_decleration R_PAR L_CURLY statements R_CURLY

    IDENTIFIER  shift, and go to state 6


State 5

    2 function_declerations: function_declerations function_decleration •

    $default  reduce using rule 2 (function_declerations)


State 6

   33 function_decleration: FUNC IDENTIFIER • L_PAR paramerter_decleration R_PAR L_CURLY statements R_CURLY

    L_PAR  shift, and go to state 7


State 7

   33 function_decleration: FUNC IDENTIFIER L_PAR • paramerter_decleration R_PAR L_CURLY statements R_CURLY

    INT  shift, and go to state 8

    $default  reduce using rule 32 (paramerter_decleration)

    paramerter_decleration  go to state 9


State 8

   28 paramerter_decleration: INT • IDENTIFIER
   29                       | INT • IDENTIFIER COMMA paramerter_decleration
   30                       | INT • L_BRAKET R_BRAKET IDENTIFIER
   31                       | INT • L_BRAKET R_BRAKET IDENTIFIER COMMA paramerter_decleration

    IDENTIFIER  shift, and go to state 10
    L_BRAKET    shift, and go to state 11


State 9

   33 function_decleration: FUNC IDENTIFIER L_PAR paramerter_decleration • R_PAR L_CURLY statements R_CURLY

    R_PAR  shift, and go to state 12


State 10

   28 paramerter_decleration: INT IDENTIFIER •
   29                       | INT IDENTIFIER • COMMA paramerter_decleration

    COMMA  shift, and go to state 13

    $default  reduce using rule 28 (paramerter_decleration)


State 11

   30 paramerter_decleration: INT L_BRAKET • R_BRAKET IDENTIFIER
   31                       | INT L_BRAKET • R_BRAKET IDENTIFIER COMMA paramerter_decleration

    R_BRAKET  shift, and go to state 14


State 12

   33 function_decleration: FUNC IDENTIFIER L_PAR paramerter_decleration R_PAR • L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 15


State 13

   29 paramerter_decleration: INT IDENTIFIER COMMA • paramerter_decleration

    INT  shift, and go to state 8

    $default  reduce using rule 32 (paramerter_decleration)

    paramerter_decleration  go to state 16


State 14

   30 paramerter_decleration: INT L_BRAKET R_BRAKET • IDENTIFIER
   31                       | INT L_BRAKET R_BRAKET • IDENTIFIER COMMA paramerter_decleration

    IDENTIFIER  shift, and go to state 17


State 15

   33 function_decleration: FUNC IDENTIFIER L_PAR paramerter_decleration R_PAR L_CURLY • statements R_CURLY

    $default  reduce using rule 5 (statements)

    statements  go to state 18


State 16

   29 paramerter_decleration: INT IDENTIFIER COMMA paramerter_decleration •

    $default  reduce using rule 29 (paramerter_decleration)


State 17

   30 paramerter_decleration: INT L_BRAKET R_BRAKET IDENTIFIER •
   31                       | INT L_BRAKET R_BRAKET IDENTIFIER • COMMA paramerter_decleration

    COMMA  shift, and go to state 19

    $default  reduce using rule 30 (paramerter_decleration)


State 18

    4 statements: statements • statement
   33 function_decleration: FUNC IDENTIFIER L_PAR paramerter_decleration R_PAR L_CURLY statements • R_CURLY

    IDENTIFIER  shift, and go to state 20
    RETURN      shift, and go to state 21
    INT         shift, and go to state 22
    PRT         shift, and go to state 23
    WHILE       shift, and go to state 24
    IF          shift, and go to state 25
    BREAK       shift, and go to state 26
    CONTINUE    shift, and go to state 27
    READ        shift, and go to state 28
    R_CURLY     shift, and go to state 29

    statement         go to state 30
    if_statement      go to state 31
    return_statement  go to state 32
    var_decleration   go to state 33
    var_assigment     go to state 34
    print_statement   go to state 35
    read_statement    go to state 36
    while_statement   go to state 37


State 19

   31 paramerter_decleration: INT L_BRAKET R_BRAKET IDENTIFIER COMMA • paramerter_decleration

    INT  shift, and go to state 8

    $default  reduce using rule 32 (paramerter_decleration)

    paramerter_decleration  go to state 38


State 20

   34 var_assigment: IDENTIFIER • ASSIGNMENT expression
   35              | IDENTIFIER • L_BRAKET NUMBER R_BRAKET ASSIGNMENT expression

    L_BRAKET    shift, and go to state 39
    ASSIGNMENT  shift, and go to state 40


State 21

   24 return_statement: RETURN • expression

    L_PAR       shift, and go to state 41
    NUMBER      shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    expression           go to state 44
    multiplicative_expr  go to state 45
    term                 go to state 46
    varibles             go to state 47


State 22

   25 var_decleration: INT • IDENTIFIER
   26                | INT • L_BRAKET NUMBER R_BRAKET IDENTIFIER
   27                | INT • IDENTIFIER ASSIGNMENT expression

    IDENTIFIER  shift, and go to state 48
    L_BRAKET    shift, and go to state 49


State 23

   53 print_statement: PRT • L_PAR expression R_PAR

    L_PAR  shift, and go to state 50


State 24

   55 while_statement: WHILE • L_PAR bool_expression R_PAR L_CURLY statements R_CURLY

    L_PAR  shift, and go to state 51


State 25

   15 if_statement: IF • L_PAR bool_expression R_PAR L_CURLY statements R_CURLY else_statement

    L_PAR  shift, and go to state 52


State 26

   13 statement: BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 53


State 27

   14 statement: CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 54


State 28

   54 read_statement: READ • L_PAR expression R_PAR

    L_PAR  shift, and go to state 55


State 29

   33 function_decleration: FUNC IDENTIFIER L_PAR paramerter_decleration R_PAR L_CURLY statements R_CURLY •

    $default  reduce using rule 33 (function_decleration)


State 30

    4 statements: statements statement •

    $default  reduce using rule 4 (statements)


State 31

    9 statement: if_statement •

    $default  reduce using rule 9 (statement)


State 32

   10 statement: return_statement • SEMICOLON

    SEMICOLON  shift, and go to state 56


State 33

    6 statement: var_decleration • SEMICOLON

    SEMICOLON  shift, and go to state 57


State 34

    7 statement: var_assigment • SEMICOLON

    SEMICOLON  shift, and go to state 58


State 35

    8 statement: print_statement • SEMICOLON

    SEMICOLON  shift, and go to state 59


State 36

   11 statement: read_statement • SEMICOLON

    SEMICOLON  shift, and go to state 60


State 37

   12 statement: while_statement •

    $default  reduce using rule 12 (statement)


State 38

   31 paramerter_decleration: INT L_BRAKET R_BRAKET IDENTIFIER COMMA paramerter_decleration •

    $default  reduce using rule 31 (paramerter_decleration)


State 39

   35 var_assigment: IDENTIFIER L_BRAKET • NUMBER R_BRAKET ASSIGNMENT expression

    NUMBER  shift, and go to state 61


State 40

   34 var_assigment: IDENTIFIER ASSIGNMENT • expression

    L_PAR       shift, and go to state 41
    NUMBER      shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    expression           go to state 62
    multiplicative_expr  go to state 45
    term                 go to state 46
    varibles             go to state 47


State 41

   44 term: L_PAR • expression R_PAR

    L_PAR       shift, and go to state 41
    NUMBER      shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    expression           go to state 63
    multiplicative_expr  go to state 45
    term                 go to state 46
    varibles             go to state 47


State 42

   45 term: NUMBER •

    $default  reduce using rule 45 (term)


State 43

   46 term: IDENTIFIER • L_PAR pars R_PAR
   51 varibles: IDENTIFIER •
   52         | IDENTIFIER • L_BRAKET NUMBER R_BRAKET

    L_PAR     shift, and go to state 64
    L_BRAKET  shift, and go to state 65

    $default  reduce using rule 51 (varibles)


State 44

   24 return_statement: RETURN expression •

    $default  reduce using rule 24 (return_statement)


State 45

   36 expression: multiplicative_expr •
   37           | multiplicative_expr • ADD expression
   38           | multiplicative_expr • SUBTRACTION expression

    SUBTRACTION  shift, and go to state 66
    ADD          shift, and go to state 67

    $default  reduce using rule 36 (expression)


State 46

   40 multiplicative_expr: term •
   41                    | term • MOD multiplicative_expr
   42                    | term • MULTIPLY multiplicative_expr
   43                    | term • DIVIDE multiplicative_expr

    MULTIPLY  shift, and go to state 68
    DIVIDE    shift, and go to state 69
    MOD       shift, and go to state 70

    $default  reduce using rule 40 (multiplicative_expr)


State 47

   47 term: varibles •

    $default  reduce using rule 47 (term)


State 48

   25 var_decleration: INT IDENTIFIER •
   27                | INT IDENTIFIER • ASSIGNMENT expression

    ASSIGNMENT  shift, and go to state 71

    $default  reduce using rule 25 (var_decleration)


State 49

   26 var_decleration: INT L_BRAKET • NUMBER R_BRAKET IDENTIFIER

    NUMBER  shift, and go to state 72


State 50

   53 print_statement: PRT L_PAR • expression R_PAR

    L_PAR       shift, and go to state 41
    NUMBER      shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    expression           go to state 73
    multiplicative_expr  go to state 45
    term                 go to state 46
    varibles             go to state 47


State 51

   55 while_statement: WHILE L_PAR • bool_expression R_PAR L_CURLY statements R_CURLY

    L_PAR       shift, and go to state 41
    NUMBER      shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    expression           go to state 74
    bool_expression      go to state 75
    multiplicative_expr  go to state 45
    term                 go to state 46
    varibles             go to state 47


State 52

   15 if_statement: IF L_PAR • bool_expression R_PAR L_CURLY statements R_CURLY else_statement

    L_PAR       shift, and go to state 41
    NUMBER      shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    expression           go to state 74
    bool_expression      go to state 76
    multiplicative_expr  go to state 45
    term                 go to state 46
    varibles             go to state 47


State 53

   13 statement: BREAK SEMICOLON •

    $default  reduce using rule 13 (statement)


State 54

   14 statement: CONTINUE SEMICOLON •

    $default  reduce using rule 14 (statement)


State 55

   54 read_statement: READ L_PAR • expression R_PAR

    L_PAR       shift, and go to state 41
    NUMBER      shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    expression           go to state 77
    multiplicative_expr  go to state 45
    term                 go to state 46
    varibles             go to state 47


State 56

   10 statement: return_statement SEMICOLON •

    $default  reduce using rule 10 (statement)


State 57

    6 statement: var_decleration SEMICOLON •

    $default  reduce using rule 6 (statement)


State 58

    7 statement: var_assigment SEMICOLON •

    $default  reduce using rule 7 (statement)


State 59

    8 statement: print_statement SEMICOLON •

    $default  reduce using rule 8 (statement)


State 60

   11 statement: read_statement SEMICOLON •

    $default  reduce using rule 11 (statement)


State 61

   35 var_assigment: IDENTIFIER L_BRAKET NUMBER • R_BRAKET ASSIGNMENT expression

    R_BRAKET  shift, and go to state 78


State 62

   34 var_assigment: IDENTIFIER ASSIGNMENT expression •

    $default  reduce using rule 34 (var_assigment)


State 63

   44 term: L_PAR expression • R_PAR

    R_PAR  shift, and go to state 79


State 64

   46 term: IDENTIFIER L_PAR • pars R_PAR

    L_PAR       shift, and go to state 41
    NUMBER      shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    $default  reduce using rule 50 (pars)

    expression           go to state 80
    multiplicative_expr  go to state 45
    term                 go to state 46
    pars                 go to state 81
    varibles             go to state 47


State 65

   52 varibles: IDENTIFIER L_BRAKET • NUMBER R_BRAKET

    NUMBER  shift, and go to state 82


State 66

   38 expression: multiplicative_expr SUBTRACTION • expression

    L_PAR       shift, and go to state 41
    NUMBER      shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    expression           go to state 83
    multiplicative_expr  go to state 45
    term                 go to state 46
    varibles             go to state 47


State 67

   37 expression: multiplicative_expr ADD • expression

    L_PAR       shift, and go to state 41
    NUMBER      shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    expression           go to state 84
    multiplicative_expr  go to state 45
    term                 go to state 46
    varibles             go to state 47


State 68

   42 multiplicative_expr: term MULTIPLY • multiplicative_expr

    L_PAR       shift, and go to state 41
    NUMBER      shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    multiplicative_expr  go to state 85
    term                 go to state 46
    varibles             go to state 47


State 69

   43 multiplicative_expr: term DIVIDE • multiplicative_expr

    L_PAR       shift, and go to state 41
    NUMBER      shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    multiplicative_expr  go to state 86
    term                 go to state 46
    varibles             go to state 47


State 70

   41 multiplicative_expr: term MOD • multiplicative_expr

    L_PAR       shift, and go to state 41
    NUMBER      shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    multiplicative_expr  go to state 87
    term                 go to state 46
    varibles             go to state 47


State 71

   27 var_decleration: INT IDENTIFIER ASSIGNMENT • expression

    L_PAR       shift, and go to state 41
    NUMBER      shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    expression           go to state 88
    multiplicative_expr  go to state 45
    term                 go to state 46
    varibles             go to state 47


State 72

   26 var_decleration: INT L_BRAKET NUMBER • R_BRAKET IDENTIFIER

    R_BRAKET  shift, and go to state 89


State 73

   53 print_statement: PRT L_PAR expression • R_PAR

    R_PAR  shift, and go to state 90


State 74

   39 bool_expression: expression • comparitors expression

    LESS        shift, and go to state 91
    LESS_EQ     shift, and go to state 92
    GREATER     shift, and go to state 93
    GREATER_EQ  shift, and go to state 94
    EQUALITY    shift, and go to state 95
    NOT_EQ      shift, and go to state 96

    comparitors  go to state 97


State 75

   55 while_statement: WHILE L_PAR bool_expression • R_PAR L_CURLY statements R_CURLY

    R_PAR  shift, and go to state 98


State 76

   15 if_statement: IF L_PAR bool_expression • R_PAR L_CURLY statements R_CURLY else_statement

    R_PAR  shift, and go to state 99


State 77

   54 read_statement: READ L_PAR expression • R_PAR

    R_PAR  shift, and go to state 100


State 78

   35 var_assigment: IDENTIFIER L_BRAKET NUMBER R_BRAKET • ASSIGNMENT expression

    ASSIGNMENT  shift, and go to state 101


State 79

   44 term: L_PAR expression R_PAR •

    $default  reduce using rule 44 (term)


State 80

   49 pars: expression •

    $default  reduce using rule 49 (pars)


State 81

   46 term: IDENTIFIER L_PAR pars • R_PAR
   48 pars: pars • COMMA expression

    R_PAR  shift, and go to state 102
    COMMA  shift, and go to state 103


State 82

   52 varibles: IDENTIFIER L_BRAKET NUMBER • R_BRAKET

    R_BRAKET  shift, and go to state 104


State 83

   38 expression: multiplicative_expr SUBTRACTION expression •

    $default  reduce using rule 38 (expression)


State 84

   37 expression: multiplicative_expr ADD expression •

    $default  reduce using rule 37 (expression)


State 85

   42 multiplicative_expr: term MULTIPLY multiplicative_expr •

    $default  reduce using rule 42 (multiplicative_expr)


State 86

   43 multiplicative_expr: term DIVIDE multiplicative_expr •

    $default  reduce using rule 43 (multiplicative_expr)


State 87

   41 multiplicative_expr: term MOD multiplicative_expr •

    $default  reduce using rule 41 (multiplicative_expr)


State 88

   27 var_decleration: INT IDENTIFIER ASSIGNMENT expression •

    $default  reduce using rule 27 (var_decleration)


State 89

   26 var_decleration: INT L_BRAKET NUMBER R_BRAKET • IDENTIFIER

    IDENTIFIER  shift, and go to state 105


State 90

   53 print_statement: PRT L_PAR expression R_PAR •

    $default  reduce using rule 53 (print_statement)


State 91

   18 comparitors: LESS •

    $default  reduce using rule 18 (comparitors)


State 92

   19 comparitors: LESS_EQ •

    $default  reduce using rule 19 (comparitors)


State 93

   20 comparitors: GREATER •

    $default  reduce using rule 20 (comparitors)


State 94

   21 comparitors: GREATER_EQ •

    $default  reduce using rule 21 (comparitors)


State 95

   22 comparitors: EQUALITY •

    $default  reduce using rule 22 (comparitors)


State 96

   23 comparitors: NOT_EQ •

    $default  reduce using rule 23 (comparitors)


State 97

   39 bool_expression: expression comparitors • expression

    L_PAR       shift, and go to state 41
    NUMBER      shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    expression           go to state 106
    multiplicative_expr  go to state 45
    term                 go to state 46
    varibles             go to state 47


State 98

   55 while_statement: WHILE L_PAR bool_expression R_PAR • L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 107


State 99

   15 if_statement: IF L_PAR bool_expression R_PAR • L_CURLY statements R_CURLY else_statement

    L_CURLY  shift, and go to state 108


State 100

   54 read_statement: READ L_PAR expression R_PAR •

    $default  reduce using rule 54 (read_statement)


State 101

   35 var_assigment: IDENTIFIER L_BRAKET NUMBER R_BRAKET ASSIGNMENT • expression

    L_PAR       shift, and go to state 41
    NUMBER      shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    expression           go to state 109
    multiplicative_expr  go to state 45
    term                 go to state 46
    varibles             go to state 47


State 102

   46 term: IDENTIFIER L_PAR pars R_PAR •

    $default  reduce using rule 46 (term)


State 103

   48 pars: pars COMMA • expression

    L_PAR       shift, and go to state 41
    NUMBER      shift, and go to state 42
    IDENTIFIER  shift, and go to state 43

    expression           go to state 110
    multiplicative_expr  go to state 45
    term                 go to state 46
    varibles             go to state 47


State 104

   52 varibles: IDENTIFIER L_BRAKET NUMBER R_BRAKET •

    $default  reduce using rule 52 (varibles)


State 105

   26 var_decleration: INT L_BRAKET NUMBER R_BRAKET IDENTIFIER •

    $default  reduce using rule 26 (var_decleration)


State 106

   39 bool_expression: expression comparitors expression •

    $default  reduce using rule 39 (bool_expression)


State 107

   55 while_statement: WHILE L_PAR bool_expression R_PAR L_CURLY • statements R_CURLY

    $default  reduce using rule 5 (statements)

    statements  go to state 111


State 108

   15 if_statement: IF L_PAR bool_expression R_PAR L_CURLY • statements R_CURLY else_statement

    $default  reduce using rule 5 (statements)

    statements  go to state 112


State 109

   35 var_assigment: IDENTIFIER L_BRAKET NUMBER R_BRAKET ASSIGNMENT expression •

    $default  reduce using rule 35 (var_assigment)


State 110

   48 pars: pars COMMA expression •

    $default  reduce using rule 48 (pars)


State 111

    4 statements: statements • statement
   55 while_statement: WHILE L_PAR bool_expression R_PAR L_CURLY statements • R_CURLY

    IDENTIFIER  shift, and go to state 20
    RETURN      shift, and go to state 21
    INT         shift, and go to state 22
    PRT         shift, and go to state 23
    WHILE       shift, and go to state 24
    IF          shift, and go to state 25
    BREAK       shift, and go to state 26
    CONTINUE    shift, and go to state 27
    READ        shift, and go to state 28
    R_CURLY     shift, and go to state 113

    statement         go to state 30
    if_statement      go to state 31
    return_statement  go to state 32
    var_decleration   go to state 33
    var_assigment     go to state 34
    print_statement   go to state 35
    read_statement    go to state 36
    while_statement   go to state 37


State 112

    4 statements: statements • statement
   15 if_statement: IF L_PAR bool_expression R_PAR L_CURLY statements • R_CURLY else_statement

    IDENTIFIER  shift, and go to state 20
    RETURN      shift, and go to state 21
    INT         shift, and go to state 22
    PRT         shift, and go to state 23
    WHILE       shift, and go to state 24
    IF          shift, and go to state 25
    BREAK       shift, and go to state 26
    CONTINUE    shift, and go to state 27
    READ        shift, and go to state 28
    R_CURLY     shift, and go to state 114

    statement         go to state 30
    if_statement      go to state 31
    return_statement  go to state 32
    var_decleration   go to state 33
    var_assigment     go to state 34
    print_statement   go to state 35
    read_statement    go to state 36
    while_statement   go to state 37


State 113

   55 while_statement: WHILE L_PAR bool_expression R_PAR L_CURLY statements R_CURLY •

    $default  reduce using rule 55 (while_statement)


State 114

   15 if_statement: IF L_PAR bool_expression R_PAR L_CURLY statements R_CURLY • else_statement

    ELSE  shift, and go to state 115

    $default  reduce using rule 17 (else_statement)

    else_statement  go to state 116


State 115

   16 else_statement: ELSE • L_CURLY statements R_CURLY

    L_CURLY  shift, and go to state 117


State 116

   15 if_statement: IF L_PAR bool_expression R_PAR L_CURLY statements R_CURLY else_statement •

    $default  reduce using rule 15 (if_statement)


State 117

   16 else_statement: ELSE L_CURLY • statements R_CURLY

    $default  reduce using rule 5 (statements)

    statements  go to state 118


State 118

    4 statements: statements • statement
   16 else_statement: ELSE L_CURLY statements • R_CURLY

    IDENTIFIER  shift, and go to state 20
    RETURN      shift, and go to state 21
    INT         shift, and go to state 22
    PRT         shift, and go to state 23
    WHILE       shift, and go to state 24
    IF          shift, and go to state 25
    BREAK       shift, and go to state 26
    CONTINUE    shift, and go to state 27
    READ        shift, and go to state 28
    R_CURLY     shift, and go to state 119

    statement         go to state 30
    if_statement      go to state 31
    return_statement  go to state 32
    var_decleration   go to state 33
    var_assigment     go to state 34
    print_statement   go to state 35
    read_statement    go to state 36
    while_statement   go to state 37


State 119

   16 else_statement: ELSE L_CURLY statements R_CURLY •

    $default  reduce using rule 16 (else_statement)
